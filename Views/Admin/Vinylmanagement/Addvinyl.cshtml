@{
  Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@model MuseMusic.Models.ManagerModels.VinylViewModel

<main class="disk-management">
  @* upload ảnh *@

  <div class="upload-container-1">
    <h1>Upload Multiple Images</h1>
    <form id="uploadForm" action="" method="post" enctype="multipart/form-data">
      <label for="fileInput" class="custom-file-input">
        Choose Images
        <input type="file" id="fileInput" accept="image/*" multiple hidden>
      </label>
      <button type="submit" class="upload-btn">Upload</button>
    </form>
    <div class="preview-container" id="previewContainer">
    </div>
  </div>

  <h1>THÊM ĐĨA THAN</h1>
  <div class="form-container">
    <form method="post" asp-action="AddVinyl" enctype="multipart/form-data">
      @Html.AntiForgeryToken()
      <input type="hidden" asp-for="SelectedProduct.ProductId" value="@Model.SelectedProduct.ProductId" />

      <input type="hidden" id="selectedImageUrls" name="selectedImageUrls" value="" />

      <div class="product-info">
        <div class="form-group">
          <label for="name">Tên*</label>
          <input type="text" id="name" asp-for="SelectedProduct.ProductName" placeholder="Nhập tên sản phẩm" required />
        </div>

        <div class="form-group">
          <label for="artist">Nghệ sĩ*</label>
          <select id="artist" asp-for="SelectedArtistIds" class="js-example-basic-multiple-limit" multiple="multiple"
            style="width: 300px;">
            @if (Model?.AllArtists != null)
            {
              @foreach (var artist in Model.AllArtists)
              {
                <!option value="@artist.Id" @(Model.SelectedArtistIds.Contains(artist.Id) ? "selected" : "")>@artist.Name
                </!option>
              }
            }
          </select>
        </div>

        <div class="form-group">
          <label for="category">Thể loại*</label>
          <select id="category" asp-for="SelectedCategories" class="js-example-basic-multiple-limit" multiple="multiple"
            style="width: 300px;">
            @if (Model?.AllCategories != null)
            {
              @foreach (var category in Model.AllCategories)
              {
                <!option value="@category.Id" @(Model.SelectedCategories.Contains(category.Id) ? "selected" : "")>
                  @category.Name</!option>
              }
            }
          </select>
        </div>

        <div class="form-group">
          <label for="brand">Hãng phát hành*</label>
          <select id="brand" asp-for="SelectedBrandId" class="js-example-basic-single" style="width: 300px;" required>
            @if (Model?.AllBrands != null)
            {
              @foreach (var brand in Model.AllBrands)
              {
                <!option value="@brand.Id" @(Model.SelectedBrandId == brand.Id ? "selected" : "")>@brand.Name</!option>
              }
            }
          </select>
        </div>

        <div class="form-group">
          <label for="release-year">Năm phát hành*</label>
          <input type="text" id="release-year" asp-for="SelectedProduct.Years" placeholder="Nhập năm phát hành" required
            min="0" max="@DateTime.Now.Year" />
          <small class="error-message" id="year-error" style="color: red; display: none;">
            Năm phát hành không được âm và không được vượt quá năm hiện tại.
          </small>
        </div>

        <div class="form-group">
          <label for="mood">Thể loại*</label>
          <select id="mood" asp-for="SelectedMood" class="js-example-basic-multiple-limit" multiple="multiple"
            style="width: 300px;">
            @if (Model?.AllMoods != null)
            {
              @foreach (var mood in Model.AllMoods)
              {
                <!option value="@mood.Id" @(Model.SelectedMood.Contains(mood.Id) ? "selected" : "")>@mood.Name</!option>
              }
            }
          </select>
        </div>

        <div class="form-group">
          <label for="code">Mã đĩa*</label>
          <input type="text" id="code" asp-for="SelectedProduct.DiskId" placeholder="Nhập mã đĩa" required />
        </div>

        <div class="form-group">
          <label for="price">Giá tiền*</label>
          <input type="text" id="price" asp-for="SelectedProduct.Price" placeholder="Nhập giá tiền" required min="1" />
          <small class="error-message" id="price-error" style="color: red; display: none;">
            Giá tiền không được âm.
          </small>
        </div>

        <div class="form-group">
          <label for="stock">Số lượng sản phẩm*</label>
          <input type="text" id="stock" asp-for="SelectedProduct.ProductQuantity" placeholder="Nhập số lượng sản phẩm"
            required min="0" />
          <small class="error-message" id="quanity-error" style="color: red; display: none;">
            số lượng không được âm.
          </small>
        </div>
      </div>

      <!-- Additional Information -->
      <div class="additional-info">
        <div class="form-group">
          <label for="notes">Ghi chú sản phẩm</label>
          <textarea id="notes" asp-for="SelectedProduct.ProductDescription" placeholder="Nhập ghi chú"
            required></textarea>
        </div>

        <div class="form-group">
          <label for="track-list">Track List</label>
          <textarea id="track-list" asp-for="SelectedProduct.Tracklist" placeholder="Nhập danh sách bài hát"
            required></textarea>
        </div>
      </div>

      <!-- Buttons -->
      <div class="form-buttons">
        <button type="button" class="cancel-btn" onclick="window.location.href='/admin/vinylmanage'">HỦY</button>
        <button type="submit" class="confirm-btn">LƯU</button>
      </div>
    </form>
  </div>
</main>

<!-- Scripts -->


<script>
  // Handle the image upload button
  document.querySelector(".add-image-btn").addEventListener("click", function () {
    document.querySelector("#image-upload").click();
  });
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.0.13/dist/js/select2.min.js"></script>

<script>
  function formatState(state) {
    if (!state.id) {
      return state.text;
    }
    // Use .text() instead of HTML string concatenation to avoid script injection issues
    $state.find("span").text(state.text);
    $state.find("img").attr("src", baseUrl + "/" + state.element.value.toLowerCase() + ".png");

    return $state;
  };
  $(".js-example-templating").select2({
    templateSelection: formatState
  });

  $(".js-example-basic-multiple-limit").select2({
    maximumSelectionLength: 5
  });
  $('#artist, #category, #mood').on('change', function () {
    // Trigger select2 to update the selected options before form submit
    $(this).trigger('change');
  });
  document.getElementById("price").addEventListener("input", function () {
    if (this.value < 1) {
      document.getElementById("price-error").style.display = "block";
      this.value = ""; // Reset giá trị nếu nhập sai
    } else {
      document.getElementById("price-error").style.display = "none";
    }
  });

  document.getElementById("stock").addEventListener("input", function () {
    if (this.value < 0) {
      document.getElementById("quanity-error").style.display = "block";
      this.value = ""; // Reset giá trị nếu nhập sai
    } else {
      document.getElementById("quanity-error").style.display = "none";
    }
  });

  document.getElementById("release-year").addEventListener("input", function () {
    const currentYear = new Date().getFullYear();
    if (this.value < 0 || this.value > currentYear) {
      document.getElementById("year-error").style.display = "block";
      this.value = ""; // Reset giá trị nếu nhập sai
    } else {
      document.getElementById("year-error").style.display = "none";
    }
  });
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const fileInput = document.getElementById('fileInput');
    const previewContainer = document.getElementById('previewContainer');
    const imageUrlsInput = document.getElementById('selectedImageUrls');

    // Handle file input preview for new images
    fileInput.addEventListener('change', event => {
      const files = Array.from(event.target.files);
      files.forEach((file, index) => {
        const reader = new FileReader();
        reader.onload = e => {
          const wrapper = document.createElement('div');
          wrapper.classList.add('image-wrapper');
          wrapper.classList.add('preview');

          const img = document.createElement('img');
          img.src = e.target.result;

          const deleteBtn = document.createElement('button');
          deleteBtn.classList.add('delete-btn');
          deleteBtn.innerHTML = '<i class="fa-solid fa-x"></i>';
          deleteBtn.addEventListener('click', () => wrapper.remove());

          wrapper.appendChild(img);
          wrapper.appendChild(deleteBtn);
          previewContainer.appendChild(wrapper);
        };
        reader.readAsDataURL(file);
      });
    });


    // Xử lý khi người dùng submit form để upload ảnh mới
    document.getElementById("uploadForm").addEventListener("submit", async event => {
      event.preventDefault();

      // Cập nhật giá trị của selectedImageUrls trước khi submit
      updateImageUrls();

      const formData = new FormData();
      Array.from(fileInput.files).forEach(file => formData.append("files", file));

      // Nếu không có ảnh mới nào được chọn, dừng lại
      if (formData.getAll('files').length === 0 && imageUrlsInput.value === '') {
        alert('No images selected.');
        return;
      }

      try {
        const response = await fetch('/admin/upload-image', {
          method: 'POST',
          body: formData
        });

        // Kiểm tra nếu server trả về lỗi
        if (!response.ok) {
          const errorData = await response.json();
          console.error('Error from server:', errorData);
          alert(`Error uploading image: ${errorData.message || 'Unknown error'}`);
          return;
        }

        const data = await response.json();
        console.log('Response data:', data);

        if (data.fileUrls) {
          // Xóa tất cả ảnh preview trước khi hiển thị ảnh đã upload
          const previewWrappers = previewContainer.querySelectorAll('.preview');
          previewWrappers.forEach(wrapper => wrapper.remove());

          // Giữ lại các ảnh đã upload thành công
          data.fileUrls.forEach(url => {
            const wrapper = document.createElement('div');
            wrapper.classList.add('image-wrapper');

            const img = document.createElement('img');
            img.src = url;
            document.getElementById('selectedImageUrls').value = data.fileUrls.join(',');
            // Thêm nút xóa cho ảnh
            const deleteBtn = document.createElement('button');
            deleteBtn.classList.add('delete-btn');
            deleteBtn.innerHTML = '<i class="fa-solid fa-x"></i>';
            deleteBtn.addEventListener('click', () => handleImageDelete(url, deleteBtn));

            wrapper.appendChild(img);
            wrapper.appendChild(deleteBtn);
            previewContainer.appendChild(wrapper);
          });

          alert("Successfully uploaded image.");
        } else {
          alert("Error uploading image.");
        }

      } catch (error) {
        console.error('Error uploading image:', error);
        alert('Error uploading image.');
      }
    });

    // Xử lý xóa ảnh
    async function handleImageDelete(imageUrl, deleteBtn) {
      const imageId = imageUrl.split('/').pop(); // Lấy id từ URL

      if (confirm('Are you sure you want to delete this image?')) {
        try {
          const response = await fetch(`/admin/delete-image/${imageId}`, { method: 'DELETE' });
          if (response.ok) {
            deleteBtn.closest('.image-wrapper').remove(); // Xóa ảnh khỏi giao diện frontend

            // Cập nhật lại giá trị cho selectedImageUrls
            updateImageUrls();
          } else {
            alert('Failed to delete image.');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Failed to delete image.');
        }
      }
    }

    // Cập nhật giá trị của selectedImageUrls
    function updateImageUrls() {
      const imageWrappers = previewContainer.querySelectorAll('.image-wrapper img');
      const imageUrls = Array.from(imageWrappers).map(img => img.src);
      imageUrlsInput.value = imageUrls.join(',');
    }
  });
</script>
